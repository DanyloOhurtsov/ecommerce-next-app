generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
}

model Billboard {
  id        String   @id @default(uuid()) @map("_id")
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  storeId     String
  store       Store     @relation("StoreCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  storeId  String
  store    Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products Product[]

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  storeId  String
  store    Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products Product[]

  @@index([storeId])
}

model Product {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  price      Int
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  storeId    String
  store      Store        @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category     @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizeId     String
  size       Size         @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color        @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItems[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid()) @map("_id")
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id        String   @id @default(uuid()) @map("_id")
  storeId   String
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  name      String   @default("")

  // Relations
  store      Store        @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItems[]

  @@index([storeId])
}

model OrderItems {
  id String @id @default(uuid()) @map("_id")

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
